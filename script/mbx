#! /usr/bin/python

# ********************************************************************
# Copyright 2014 Robert A. Beezer
#
# This file is part of MathBook XML.
#
# MathBook XML is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 or version 3 of the
# License (at your option).
#
# MathBook XML is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
# *********************************************************************

def tikz_conversion(xml_source, dest_dir, outformat):
	global config
	import tempfile, os, os.path, subprocess, shutil
	_verbose('converting tikz pictures from {} to {} graphics in {}'.format(xml_source, outformat, dest_dir))
	dest_dir = sanitize_directory(dest_dir)
	tmp_dir = tempfile.mkdtemp()
	_debug("temporary directory: {}".format(tmp_dir))
	xslt_executable = config.get('executables', 'xslt')
	_debug("xslt executable: {}".format(xslt_executable))
	tex_executable = config.get('executables', 'tex')
	_debug("tex executable: {}".format(tex_executable))
	pdfsvg_executable = config.get('executables', 'pdfsvg')
	_debug("pdfsvg executable: {}".format(pdfsvg_executable))
	# http://stackoverflow.com/questions/11269575/how-to-hide-output-of-subprocess-in-python-2-7
	devnull = open(os.devnull, 'w')
	convert_cmd = [xslt_executable,
		'--stringparam', 'scratch', tmp_dir,
		'--xinclude',
		os.path.join(mbx_xsl_dir, 'extract-tikz.xsl'),
		xml_source
		]
	_verbose("extracting tikz pictures from {}".format(xml_source))
	_debug("tikz conversion {}".format(convert_cmd))
	subprocess.call(convert_cmd)
	cwd = os.getcwd()
	os.chdir(tmp_dir)
	for tikzpic in os.listdir(tmp_dir):
		if outformat == 'source':
			shutil.copy2(tikzpic, dest_dir)
		else:
			filebase, _ = os.path.splitext(tikzpic)
			tikzpdf = "{}.pdf".format(filebase)
			tikzsvg = "{}.svg".format(filebase)
			latex_cmd = [tex_executable, tikzpic]
			_verbose("converting {} to {}".format(tikzpic, tikzpdf))
			subprocess.call(latex_cmd, stdout=devnull, stderr=subprocess.STDOUT)
			if outformat == 'svg':
				svg_cmd = [pdfsvg_executable, tikzpdf, tikzsvg]
				_verbose("converting {} to {}".format(tikzpdf, tikzsvg))
				subprocess.call(svg_cmd)
				shutil.copy2(tikzsvg, dest_dir)
			if outformat == 'pdf':
				shutil.copy2(tikzpdf, dest_dir)


def asymptote_conversion(xml_source, dest_dir, outformat):
	global config
	import tempfile, os, os.path, subprocess, shutil, glob
	_verbose('converting Asymptote diagrams from {} to {} graphics in {}'.format(xml_source, outformat.upper(), dest_dir))
	dest_dir = sanitize_directory(dest_dir)
	tmp_dir = tempfile.mkdtemp()
	_debug("temporary directory: {}".format(tmp_dir))
	xslt_executable = config.get('executables', 'xslt')
	_debug("xslt executable: {}".format(xslt_executable))
	asy_executable = config.get('executables', 'asy')
	_debug("asy executable: {}".format(asy_executable))
	extract_cmd = [xslt_executable,
		'--stringparam', 'scratch', tmp_dir,
		'--xinclude',
		os.path.join(mbx_xsl_dir, 'extract-asymptote.xsl'),
		xml_source
		]
	_verbose("extracting Asymptote diagrams from {}".format(xml_source))
	subprocess.call(extract_cmd)
	cwd = os.getcwd()
	os.chdir(tmp_dir)
	devnull = open(os.devnull, 'w')
	for asydiagram in os.listdir(tmp_dir):
		if outformat == 'source':
			shutil.copy2(asydiagram, dest_dir)
		else:
			filebase, _ = os.path.splitext(asydiagram)
			asyout = "{}.{}".format(filebase, outformat)
			asypng = "{}_*.png".format(filebase)
			asy_cmd = [asy_executable, '-batchMask', '-outformat', outformat, asydiagram]
			_verbose("converting {} to {}".format(asydiagram, asyout))
			_debug("asymptote conversion {}".format(asy_cmd))
			subprocess.call(asy_cmd, stdout=devnull, stderr=subprocess.STDOUT)
			shutil.copy2(asyout, dest_dir)
			# Sometimes Asymptotes SVGs include multiple PNGs for colored regions
			for f in glob.glob(asypng):
				shutil.copy2(f, dest_dir)


def sage_conversion(xml_source, dest_dir, outformat):
	global config
	import tempfile, os, os.path, subprocess, shutil, glob
	_verbose('converting Sage diagrams from {} to {} graphics in {}'.format(xml_source, outformat.upper(), dest_dir))
	dest_dir = sanitize_directory(dest_dir)
	tmp_dir = tempfile.mkdtemp()
	_debug("temporary directory: {}".format(tmp_dir))
	xslt_executable = config.get('executables', 'xslt')
	_debug("xslt executable: {}".format(xslt_executable))
	sage_executable = config.get('executables', 'sage')
	_debug("sage executable: {}".format(sage_executable))
	extract_cmd = [xslt_executable,
		'--stringparam', 'scratch', tmp_dir,
		'--xinclude',
		os.path.join(mbx_xsl_dir, 'extract-sageplot.xsl'),
		xml_source
		]
	_verbose("extracting Sage diagrams from {}".format(xml_source))
	subprocess.call(extract_cmd)
	cwd = os.getcwd()
	os.chdir(tmp_dir)
	devnull = open(os.devnull, 'w')
	for sageplot in os.listdir(tmp_dir):
		if outformat == 'source':
			shutil.copy2(sageplot, dest_dir)
		else:
			filebase, _ = os.path.splitext(sageplot)
			sageout = "{0}.{1}".format(filebase, outformat)
			sagepng = "{0}.png".format(filebase, outformat)
			sage_cmd = [sage_executable,  sageplot, outformat]
			_verbose("converting {} to {} (or {} for 3D)".format(sageplot, sageout, sagepng))
			_debug("sage conversion {}".format(sage_cmd))
			subprocess.call(sage_cmd, stdout=devnull, stderr=subprocess.STDOUT)
			# Sage makes PNGs for 3D
			for f in glob.glob(sageout):
				shutil.copy2(f, dest_dir)
			for f in glob.glob(sagepng):
				shutil.copy2(f, dest_dir)


# Utility functions

def _verbose(msg):
	"""Write a message to the console on program progress"""
	global args
	if args.verbose >= 1:
		print 'MBX: {}'.format(msg)


def _debug(msg):
	"""Write a message to the console with some raw information"""
	global args
	if args.verbose >= 2:
		print 'MBX-DEBUG: {}'.format(msg)


def get_mbx_path():
	"""Returns path of root MBX directory"""
	import sys, os.path
	_verbose("discovering MBX location from executable location")
	# split path off executable
	program_dir, _ = os.path.split(sys.argv[0])
	# strip "script", remove trailing separator
	return os.path.normpath(program_dir[:-6])


def get_cli_arguments():
	"""Return the CLI arguments in parser object"""
	import argparse
	parser = argparse.ArgumentParser(description='MathBook XML utility script', formatter_class=argparse.RawTextHelpFormatter)

	verbose_help = '\n'.join(["verbosity of information on progress of the program", 
		                      "  -v  is actions being performed",
		                      "  -vv is some additional raw debugging information"])
	parser.add_argument('-v', '--verbose', help=verbose_help, action="count")
	
	component_info = [
		('tikz', 'tikz pictures'), 
		('asy', 'Asymptote diagrams'),
		('sageplot', 'Sage graphics'),
	]
	component_help = 'Possible components are:\n' + '\n'.join(['  {} - {}'.format(info[0], info[1]) for info in component_info])
	parser.add_argument('-c', '--component', help=component_help, action="store", dest="component")
	
	format_info = [
		('svg', 'Scalable Vector Graphicsfile(s)'), 
		('pdf', 'Portable Document Format file(s)'),
		('source', 'Standalone source files'),
		('html', 'HyperText Markup Language (web pages)'), 
	]
	format_help = 'Output formats are:\n' + '\n'.join(['  {} - {}'.format(info[0], info[1]) for info in format_info])
	parser.add_argument('-f', '--format', help=format_help, action="store", dest='format')

	parser.add_argument('-o', '--output', help='file for output', action="store", dest='out')
	parser.add_argument('-d', '--directory', help='directory for output', action="store", dest='dir')

	parser.add_argument('xml_file', help='MathBook XML source file with content', action="store")

	return parser.parse_args()


def sanitize_directory(dir):
	"""Verify directory name, or raise error"""
	# Use with os.path.join, and do not sweat separator
	import os.path
	_verbose('verifying directory: {}'.format(dir))
	if not(os.path.isdir(dir)):
		raise ValueError('directory {} does not exist'.format(dir))
	return dir


def get_config_info(script_dir):
	"""Return configuation in object for querying"""
	import ConfigParser, os.path
	defaults = {}
	defaults['xslt'] = 'xsltproc'
	defaults['tex'] = 'xelatex'
	defaults['pdfsvg'] = 'pdf2svg'
	defaults['asy'] = 'asy'
	defaults['sage'] = 'sage'
	config_file = os.path.join(script_dir, "mbx.cfg")
	_verbose("reading configuration file at {}".format(config_file))
	config = ConfigParser.SafeConfigParser(defaults)
	config.read(config_file)
	return config


############################
# Main
############################
#
# Parse command line

args = get_cli_arguments()

_debug("CLI args {}".format(vars(args)))

import os.path

mbx_dir = get_mbx_path()
mbx_xsl_dir = os.path.join(mbx_dir, "xsl")
mbx_script_dir = os.path.join(mbx_dir, "script")

_debug("xsl dir: {}".format(mbx_xsl_dir))
_debug("script dir: {}".format(mbx_script_dir))

config = get_config_info(mbx_script_dir)

if args.component == 'tikz':
	if args.format == 'pdf':
		tikz_conversion(args.xml_file, args.dir, 'pdf')
	elif args.format == 'svg':
		tikz_conversion(args.xml_file, args.dir, 'svg')
	elif args.format == 'source':
		tikz_conversion(args.xml_file, args.dir, 'source')
	else:
		raise NotImplementedError("cannot make tikz pictures in {} format".format(args.format))
elif args.component == 'asy':
	if args.format == 'pdf':
		asymptote_conversion(args.xml_file, args.dir, 'pdf')
	elif args.format == 'svg':
		asymptote_conversion(args.xml_file, args.dir, 'svg')
	elif args.format == 'source':
		asymptote_conversion(args.xml_file, args.dir, 'source')
	else:
		raise NotImplementedError("cannot make asymptote diagrams in {} format".format(args.format))
elif args.component == 'sage':
	if args.format == 'pdf':
		sage_conversion(args.xml_file, args.dir, 'pdf')
	elif args.format == 'svg':
		sage_conversion(args.xml_file, args.dir, 'svg')
	elif args.format == 'source':
		sage_conversion(args.xml_file, args.dir, 'source')
	else:
		raise NotImplementedError("cannot make Sage graphics in {} format".format(args.format))
else:
	raise ValueError('the {} component is not an option'.format(args.component))